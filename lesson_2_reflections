What happens when you initialize a repository? Why do you need to do it?

When a repository is initialized a git file is created, however, it does not automatically create a commit.  A repository is necessary, because without it, no commit an be made.


How is the staging area different from the working directory and the repository? What value do you think it offers?

No changes are made to files while they are in the staging area.  The files are in the working directory but cannot be accessed.  The staging 
area allows commits to be more precise.  


How can you use the staging area to make sure you have one commit per logical change?

You can check which changes have been made between the working directory and the staging area using git diff or the changes between the staging directory and the repository with git diff --staged


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

If you are adding a new version or a new feature than multiple branches can distinguish the verision or feature from the main project.  


How do the diagrams help you visualize the branch structure?

Git can only view backwards, and thus is not abe to see branches in the git log.  


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

When two branches are merged together the resulting branch will have the properties of both branches.  the commit log of the lead branch will show all commits in both branches.  


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

The advantage is that it is quicker to do automerge.  the disadvantage is that unwanted content may appear that may alter how the program runs.  